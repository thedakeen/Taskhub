import React, {useContext, useEffect, useRef, useState} from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import AuthContext from "../contexts/AuthContext";

const GitHubCallback = () => {
    const navigate = useNavigate();
    const { user } = useContext(AuthContext);
    const isRequestSent = useRef(false); // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

    useEffect(() => {
        if (isRequestSent.current) return; // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è, –≤—ã—Ö–æ–¥–∏–º
        isRequestSent.current = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥

        const query = new URLSearchParams(window.location.search);
        const githubCode = query.get("code");

        console.log("üîπ GitHub Code:", githubCode);

        if (githubCode) {
            const authToken = localStorage.getItem("authToken");
            console.log("üîπ –¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞:", authToken);

            axios
                .post(
                    "http://localhost:8081/v1/profile/github",
                    { githubCode },
                    {
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json",
                            Authorization: authToken ? `Bearer ${authToken}` : "",
                        },
                    }
                )
                .then((response) => {
                    console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:", response.data);
                    alert(response.data.message);
                    navigate(`/profile/${user.id}`);
                })
                .catch((error) => {
                    if (error.response) {
                        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", error.response.status, error.response.data);
                        alert(`–û—à–∏–±–∫–∞: ${error.response.status} - ${error.response.data.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
                    } else if (error.request) {
                        console.error("‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", error.request);
                        alert("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                    } else {
                        console.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error.message);
                        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
                    }
                    navigate("/");
                });
        } else {
            alert("GitHub authorization failed.");
            navigate("/");
        }
    }, [navigate]);

    return <p>Processing GitHub authorization...</p>;
};

export default GitHubCallback;
